Export Org-mode files as editable web pages                -*- org -*-

* Installation and Configuration Instructions

You will need Emacs 24 or later, and recent versions of elnode and
Org-mode which are available from their respective repositories at
http://nicferrier.github.com/elnode/ and
http://orgmode.org/org-mode-download.html.

1. Load the required libraries.
   #+begin_src emacs-lisp
     (mapc (lambda (path) (add-to-list 'load-path path))
           '("path/to/elnode"
             "path/to/org-mode/lisp"
             "path/to/org-mode/contrib/lisp"
             "path/to/org-ehtml/src"
             "path/to/org-ehtml/test/lisp"))
     (require 'test-org-ehtml)
   #+end_src

2. Run the tests to make sure everything is working.
   #+begin_src emacs-lisp
     (ert "org-ehtml")
   #+end_src

3. Set the root of your directory of Org-mode files.  For now we'll
   just use the example files used in the tests, later you can
   customize this variable.
   #+begin_src emacs-lisp
     (setq org-ehtml-docroot test-org-ehtml-example-dir)
   #+end_src

4. Start up elnode.
   #+begin_src emacs-lisp
     (elnode-start 'org-ehtml-handler :port 8888)
   #+end_src

5. Point your browser to http://localhost:8888/simple.org and move
   your mouse over the page.  Editable portions of the page will be
   highlighted, click on these to edit.

* Run over your own local Org-mode files

*Warning*: Be sure you backup your files before you start editing them
           through this experimental web interface as it could trash
           your files.

#+begin_src emacs-lisp
  (require 'org-ehtml-server)

  ;; Configure the server
  (setq
   org-ehtml-everything-editable t
   org-ehtml-docroot "~/path/to/your/files"
   my-org-ehtml-port 3333
   )

  ;; Start the server
  (elnode-start 'org-ehtml-handler :port my-org-ehtml-port)

  ;; Stop the server
  ;; (elnode-stop my-org-ehtml-port)
#+end_src

* User Authentication

To enable user authentication, first checkout the auth branch of
elnode, and then replace the 'org-ehtml-handler elnode handler with
the 'org-ehtml-auth-handler defined in src/org-ehtml-auth.el.

* Integration with version control

*Warning*: This could screw up your version control system as well as
           your flat files.

org-ehtml provides an org-ehtml-after-save-hook which can be used to
commit all changes to a local version control system.

#+begin_src emacs-lisp
  (require 'vc)
  
  (add-hook
   'org-ehtml-after-save-hook
   (lambda ()
     (let ((file (buffer-file-name (current-buffer))))
       (vc-checkin (list file) (vc-backend file) nil "edit through org-ehtml"))))
#+end_src
