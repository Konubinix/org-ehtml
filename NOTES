#                                                          -*- org -*-

* TODO upload package to marmalade after Org 7.9 release
- update the Org-mode dependency in the Makefile
- upload to marmalade

* would be good to allow the addition of new handlers
and to include some default handlers in the repo, e.g.,
- adding a new file when not present
- adding a new heading
- searching

* TODO how to add a new headline
* running through heroku
- a single instance on heroku is free
- nicferrier has forked technomancy's heroku elisp package

Try to make it easy to run org-ehtml on heroku.

* possibly more cl-* wrinkles as Emacs dev continues
#+begin_quote Achim
> Note that there's yet a new wrinkle with the upcoming release of the
> 24.2 version (which hasn't made the change yet), so 24.1.50 and
> 24.2.50 and later have new-style cl libraries...
#+end_quote

* TODO find good instructions for running behind a https proxy
This would be required for secure use of elnode's authentication.

* DONE don't re-export if the html is newer than the org
* DONE AJAX offset cleanup
After every edit, we will need to map through every element in the
html document changing the contents-[begin|end] which are larger than
the contents-end of the edited element to reflect the new offset.

* TODO specialized editable html export for source code blocks
Rather than using [[file:src/org-ehtml-client.el::%3B%3B%20(src-block%20.%20,(def-ehtml-wrap%20org-e-html-src-block))][(def-ehtml-wrap org-e-html-src-block)]], write a
specialized function for exporting code blocks to editable html.
- should have an [execute] button

** something special for "notebook" functionality with sessions?
When code blocks have a :session, how difficult would it be to add
functionality like the python web notebook interface.

* DONE replace on-click edit with side edit button
This will be much nicer for html elements that require clicks, like
links in an editable paragraph.

* TODO offer to add new files when they don't exist
This would require another case in the `org-ehtml-file-handler'.

* suggestions on testing from nicferrier
: 15:29 < nicferrier> _schulte_:
:                     https://github.com/nicferrier/elnode/blob/master/elnode-client.el#L534
: 15:29 < _schulte_> nicferrier: great, thanks
: 15:29 < nicferrier> beware, that module has had a lot removed from it - the child emacs
:                     stuff has been removed to this rle module I'm working on
: 15:30 < nicferrier> but that test should hold up. it works in my automated tests anyway.
: 15:30 < nicferrier> having said that, the fakir stuff is really very good, it's mostly a
:                     full stack test.
: 15:31 < nicferrier> just uses a fake process.
: ...
: 15:34 < _schulte_> oh, turns out `sit-for' was all I needed (for my very simple test)
:                    http://sprunge.us/eSGA
: ...
: 15:35 < nicferrier> _schulte_: if you're gonna do this you might also be interested in my
:                     phantomjs stuff - let's you test elnode apps in a headless browser.

* authentication with elnode
#+begin_quote nicferrier
I have the code in a branch on github. There is an example of doing
authentication here:

https://github.com/nicferrier/elnode/blob/auth/elnode-wiki.el#L240

that shows how to set up a declared authentication scheme which can then
be used to protect bits of code.
#+end_quote
